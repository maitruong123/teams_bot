{"version":3,"sources":["webpack:///webpack/bootstrap?7f80","webpack:///external \"express-msteams-host\"?e438","webpack:///external \"debug\"?b2c7","webpack:///external \"botbuilder-dialogs\"?4042","webpack:///external \"botbuilder\"?fa14","webpack:///./src/app/server.ts?53c8","webpack:///external \"express\"?22fe","[]","webpack:///external \"path\"?74bb","webpack:///external \"morgan\"?3206","webpack:///external \"compression\"?f791","webpack:///external \"applicationinsights\"?65e5","webpack:///external \"dotenv\"?e70f","webpack:///./src/app/TeamsAppsComponents.ts?b0db","webpack:///./src/app/botv4Bot/Botv4Bot.ts?83e2","webpack:///./src/app/botv4Bot/dialogs/HelpDialog.ts?99a5","webpack:///./src/app/botv4MessageExtension/Botv4MessageExtension.ts?52f2","webpack:///./src/app/botv4Bot/dialogs/WelcomeDialog.ts?b55a"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","log","debug","config","appInsights","setup","process","env","APPINSIGHTS_INSTRUMENTATIONKEY","start","express","Express","port","PORT","use","json","verify","req","res","buf","encoding","rawBody","toString","urlencoded","extended","set","path","join","__dirname","morgan","compression","static","MsTeamsApiRouter","allComponents","MsTeamsPageRouter","root","components","index","http","createServer","listen","nonce","Botv4Bot","TeamsActivityHandler","conversationState","super","this","_botv4MessageExtension","dialogState","createProperty","dialogs","DialogSet","add","onMessage","context","activity","type","ActivityTypes","Message","text","TurnContext","removeRecipientMention","toLowerCase","startsWith","welcomeCard","CardFactory","adaptiveCard","sendActivity","attachments","dc","createContext","beginDialog","saveChanges","onConversationUpdate","membersAdded","length","idx","id","recipient","onMessageReaction","added","reactionsAdded","textFormat","teamsChannelId","message","conversationParameters","isGroup","channelData","channel","connectorClient","adapter","createConnectorClient","serviceUrl","conversationResourceResponse","conversations","createConversation","getConversationReference","activityId","MessageExtensionDeclaration","BotDeclaration","MemoryStorage","MICROSOFT_APP_ID","MICROSOFT_APP_PASSWORD","PreventIframe","HelpDialog","Dialog","dialogId","options","endDialog","Botv4MessageExtension","Promise","resolve","title","url","HOSTNAME","height","card","body","size","data","email","Math","round","random","$schema","version","attachmentLayout","setting","state","WelcomeCard"],"mappings":"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","file":"server.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","module.exports = require(\"express-msteams-host\");","module.exports = require(\"debug\");","module.exports = require(\"botbuilder-dialogs\");","module.exports = require(\"botbuilder\");","import * as Express from \"express\";\nimport * as http from \"http\";\nimport * as path from \"path\";\nimport * as morgan from \"morgan\";\nimport { MsTeamsApiRouter, MsTeamsPageRouter } from \"express-msteams-host\";\nimport * as debug from \"debug\";\nimport * as compression from \"compression\";\nimport * as appInsights from \"applicationinsights\";\n\n\n// Initialize debug logging module\nconst log = debug(\"msteams\");\n\nlog(`Initializing Microsoft Teams Express hosted App...`);\n\n// Initialize dotenv, to use .env file settings if existing\n// tslint:disable-next-line:no-var-requires\nrequire(\"dotenv\").config();\n\n\n// Set up app insights\nappInsights.setup(process.env.APPINSIGHTS_INSTRUMENTATIONKEY).start();\n\n\n// The import of components has to be done AFTER the dotenv config\nimport * as allComponents from \"./TeamsAppsComponents\";\n\n// Create the Express webserver\nconst express = Express();\nconst port = process.env.port || process.env.PORT || 3007;\n\n// Inject the raw request body onto the request object\nexpress.use(Express.json({\n    verify: (req, res, buf: Buffer, encoding: string): void => {\n        (req as any).rawBody = buf.toString();\n    }\n}));\nexpress.use(Express.urlencoded({ extended: true }));\n\n// Express configuration\nexpress.set(\"views\", path.join(__dirname, \"/\"));\n\n// Add simple logging\nexpress.use(morgan(\"tiny\"));\n\n// Add compression - uncomment to remove compression\nexpress.use(compression());\n\n// Add /scripts and /assets as static folders\nexpress.use(\"/scripts\", Express.static(path.join(__dirname, \"web/scripts\")));\nexpress.use(\"/assets\", Express.static(path.join(__dirname, \"web/assets\")));\n\n// routing for bots, connectors and incoming web hooks - based on the decorators\n// For more information see: https://www.npmjs.com/package/express-msteams-host\nexpress.use(MsTeamsApiRouter(allComponents));\n\n// routing for pages for tabs and connector configuration\n// For more information see: https://www.npmjs.com/package/express-msteams-host\nexpress.use(MsTeamsPageRouter({\n    root: path.join(__dirname, \"web/\"),\n    components: allComponents\n}));\n\n// Set default web page\nexpress.use(\"/\", Express.static(path.join(__dirname, \"web/\"), {\n    index: \"index.html\"\n}));\n\n// Set the port\nexpress.set(\"port\", port);\n\n// Start the webserver\nhttp.createServer(express).listen(port, () => {\n    log(`Server running on ${port}`);\n});\n","module.exports = require(\"express\");","module.exports = require(\"http\");","module.exports = require(\"path\");","module.exports = require(\"morgan\");","module.exports = require(\"compression\");","module.exports = require(\"applicationinsights\");","module.exports = require(\"dotenv\");","// Components will be added here\nexport const nonce = {}; // Do not remove!\n// Automatically added for the botv4Bot bot\nexport * from \"./botv4Bot/Botv4Bot\";\n","import { BotDeclaration, MessageExtensionDeclaration, PreventIframe } from \"express-msteams-host\";\nimport * as debug from \"debug\";\nimport { DialogSet, DialogState } from \"botbuilder-dialogs\";\nimport { StatePropertyAccessor, CardFactory, TurnContext, MemoryStorage, ConversationState, ActivityTypes, TeamsActivityHandler, MessageFactory } from \"botbuilder\";\nimport HelpDialog from \"./dialogs/HelpDialog\";\nimport Botv4MessageExtension from \"../botv4MessageExtension/Botv4MessageExtension\";\nimport WelcomeCard from \"./dialogs/WelcomeDialog\";\n\n// Initialize debug logging module\nconst log = debug(\"msteams\");\n\n/**\n * Implementation for botv4 Bot\n */\n@BotDeclaration(\n    \"/api/messages\",\n    new MemoryStorage(),\n    process.env.MICROSOFT_APP_ID,\n    process.env.MICROSOFT_APP_PASSWORD)\n@PreventIframe(\"/botv4Bot/aboutBotv4Bot.html\")\nexport class Botv4Bot extends TeamsActivityHandler {\n    private readonly conversationState: ConversationState;\n    /** Local property for Botv4MessageExtension */\n    @MessageExtensionDeclaration(\"botv4MessageExtension\")\n    private _botv4MessageExtension: Botv4MessageExtension;\n    private readonly dialogs: DialogSet;\n    private dialogState: StatePropertyAccessor<DialogState>;\n\n    /**\n     * The constructor\n     * @param conversationState\n     */\n    public constructor(conversationState: ConversationState) {\n        super();\n        // Message extension Botv4MessageExtension\n        this._botv4MessageExtension = new Botv4MessageExtension();\n\n\n        this.conversationState = conversationState;\n        this.dialogState = conversationState.createProperty(\"dialogState\");\n        this.dialogs = new DialogSet(this.dialogState);\n        this.dialogs.add(new HelpDialog(\"help\"));\n\n        // Set up the Activity processing\n\n        this.onMessage(async (context: TurnContext): Promise<void> => {\n            // TODO: add your own bot logic in here\n            switch (context.activity.type) {\n                case ActivityTypes.Message:\n                    let text = TurnContext.removeRecipientMention(context.activity);\n                    text = text.toLowerCase();\n                    if (text.startsWith(\"hello\")) {\n                        const welcomeCard = CardFactory.adaptiveCard(WelcomeCard);\n                        await context.sendActivity({ attachments: [welcomeCard] });\n                    } else if (text.startsWith(\"help\")) {\n                        const dc = await this.dialogs.createContext(context);\n                        await dc.beginDialog(\"help\");\n                    } else {\n                        await context.sendActivity(`I\\'m terribly sorry, but my master hasn\\'t trained me to do anything yet...`);\n                    }\n                    break;\n                default:\n                    break;\n            }\n            // Save state changes\n            return this.conversationState.saveChanges(context);\n        });\n\n        this.onConversationUpdate(async (context: TurnContext): Promise<void> => {\n            if (context.activity.membersAdded && context.activity.membersAdded.length !== 0) {\n                for (const idx in context.activity.membersAdded) {\n                    if (context.activity.membersAdded[idx].id === context.activity.recipient.id) {\n                        const welcomeCard = CardFactory.adaptiveCard(WelcomeCard);\n                        await context.sendActivity({ attachments: [welcomeCard] });\n                    }\n                }\n            }\n        });\n\n        this.onMessageReaction(async (context: TurnContext): Promise<void> => {\n            const added = context.activity.reactionsAdded;\n            if (added && added[0]) {\n                await context.sendActivity({\n                    textFormat: \"xml\",\n                    text: `That was an interesting reaction (<b>${added[0].type}</b>)`\n                });\n            }\n        });;\n    }\n\n    async teamsCreateConversation(context, teamsChannelId, message) {\n        const conversationParameters = {\n            isGroup: true,\n            channelData: {\n                channel: {\n                    id: teamsChannelId\n                }\n            },\n\n            activity: message\n        };\n\n        const connectorClient = context.adapter.createConnectorClient(context.activity.serviceUrl);\n        const conversationResourceResponse = await connectorClient.conversations.createConversation(conversationParameters);\n        const conversationReference = TurnContext.getConversationReference(context.activity);\n        // conversationReference.conversation.id = conversationResourceResponse.id;\n        return [conversationReference, conversationResourceResponse.activityId];\n    }\n}\n","import { Dialog, DialogContext, DialogTurnResult } from \"botbuilder-dialogs\";\n\nexport default class HelpDialog extends Dialog {\n    constructor(dialogId: string) {\n        super(dialogId);\n    }\n\n    public async beginDialog(context: DialogContext, options?: any): Promise<DialogTurnResult> {\n        context.context.sendActivity(`I'm just a friendly but rather stupid bot, and right now I don't have any valuable help for you!`);\n        return await context.endDialog();\n    }\n}\n","import * as debug from \"debug\";\nimport { PreventIframe } from \"express-msteams-host\";\nimport { TurnContext, CardFactory, MessagingExtensionQuery, MessagingExtensionResult } from \"botbuilder\";\nimport { IMessagingExtensionMiddlewareProcessor } from \"botbuilder-teams-messagingextensions\";\nimport { TaskModuleRequest, TaskModuleContinueResponse } from \"botbuilder\";\n// Initialize debug logging module\nconst log = debug(\"msteams\");\n\n@PreventIframe(\"/botv4MessageExtension/config.html\")\n@PreventIframe(\"/botv4MessageExtension/action.html\")\nexport default class Botv4MessageExtension implements IMessagingExtensionMiddlewareProcessor {\n\n\n\n    public async onFetchTask(context: TurnContext, value: MessagingExtensionQuery): Promise<MessagingExtensionResult | TaskModuleContinueResponse> {\n\n\n\n        return Promise.resolve<TaskModuleContinueResponse>({\n            type: \"continue\",\n            value: {\n                title: \"Input form\",\n                url: `https://${process.env.HOSTNAME}/botv4MessageExtension/action.html?name={loginHint}&tenant={tid}&group={groupId}&theme={theme}`,\n                height: \"medium\"\n            }\n        });\n\n\n    }\n\n\n    // handle action response in here\n    // See documentation for `MessagingExtensionResult` for details\n    public async onSubmitAction(context: TurnContext, value: TaskModuleRequest): Promise<MessagingExtensionResult> {\n\n\n        const card = CardFactory.adaptiveCard(\n            {\n                type: \"AdaptiveCard\",\n                body: [\n                    {\n                        type: \"TextBlock\",\n                        size: \"Large\",\n                        text: value.data.email\n                    },\n                    {\n                        type: \"Image\",\n                        url: `https://randomuser.me/api/portraits/thumb/women/${Math.round(Math.random() * 100)}.jpg`\n                    }\n                ],\n                $schema: \"http://adaptivecards.io/schemas/adaptive-card.json\",\n                version: \"1.2\"\n            });\n        return Promise.resolve({\n            type: \"result\",\n            attachmentLayout: \"list\",\n            attachments: [card]\n        } as MessagingExtensionResult);\n    }\n\n\n\n    // this is used when canUpdateConfiguration is set to true\n    public async onQuerySettingsUrl(context: TurnContext): Promise<{ title: string, value: string }> {\n        return Promise.resolve({\n            title: \"botv4 Message Extension Configuration\",\n            value: `https://${process.env.HOSTNAME}/botv4MessageExtension/config.html?name={loginHint}&tenant={tid}&group={groupId}&theme={theme}`\n        });\n    }\n\n    public async onSettings(context: TurnContext): Promise<void> {\n        // take care of the setting returned from the dialog, with the value stored in state\n        const setting = context.activity.value.state;\n        log(`New setting: ${setting}`);\n        return Promise.resolve();\n    }\n\n}\n","const WelcomeCard = require(\"./WelcomeCard.json\");\n\nexport default WelcomeCard;\n"],"sourceRoot":""}